---
name: Test Azure OpenAI Responses API

on:
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  test-responses-api:
    runs-on: ubuntu-latest
    environment: responses  # Use the 'responses' environment for secrets

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Test Azure OpenAI Responses API
        env:
          AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}
          AZURE_OPENAI_V1_API_ENDPOINT: ${{ secrets.AZURE_OPENAI_V1_API_ENDPOINT }}
          AZURE_OPENAI_API_MODEL: ${{ secrets.AZURE_OPENAI_API_MODEL }}
        run: |
          echo "Testing responses-basic-aoai-v1.py script..."

          # Create test results directory
          mkdir -p test-results

          # Get current timestamp
          timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "Test run timestamp: $timestamp"

          # Run the script and capture output
          python responses-basic-aoai-v1.py > output.txt 2>&1
          exit_code=$?

          # Initialize test result variables
          pass_fail="PASS"
          error_code=""
          output_text=""

          # Check if script executed successfully
          if [ $exit_code -eq 0 ]; then
            echo "✅ Script executed successfully"

            # Check if output was generated and capture it
            if [ -s output.txt ]; then
              output_text=$(cat output.txt)
              echo "✅ Script produced output:"
              echo "$output_text"

              # Test whether response.output_text contains a valid string
              # Valid means: non-empty, no error indicators, and actual content
              if [ -n "$output_text" ] && ! echo "$output_text" | grep -qi "error\|exception\|traceback\|failed\|none\|null"; then
                echo "✅ Output contains valid string content"
                pass_fail="PASS"
              else
                echo "❌ Output does not contain valid string content"
                pass_fail="FAIL"
                error_code="INVALID_OUTPUT"
              fi
            else
              echo "❌ Script produced no output"
              pass_fail="FAIL"
              error_code="NO_OUTPUT"
            fi
          else
            echo "❌ Script failed with exit code: $exit_code"
            echo "Error output:"
            cat output.txt
            output_text=$(cat output.txt)
            pass_fail="FAIL"
            error_code="SCRIPT_ERROR_$exit_code"
          fi

          # Create test results JSON (using jq for proper JSON formatting)
          jq -n \
            --arg timestamp "$timestamp" \
            --arg output "$output_text" \
            --arg pass_fail "$pass_fail" \
            --arg error_code "$error_code" \
            '{
              test_last_run_date: $timestamp,
              output: $output,
              pass_fail: $pass_fail,
              error_code: $error_code
            }' > test-results/test-results.json

          # Display final results
          echo "=== Test Results ==="
          echo "Timestamp: $timestamp"
          echo "Pass/Fail: $pass_fail"
          echo "Error Code: $error_code"
          echo "Output: $output_text"

          # Exit with error if test failed
          if [ "$pass_fail" = "FAIL" ]; then
            echo "❌ Test failed"
            exit 1
          else
            echo "🎉 Test completed successfully!"
          fi

      - name: Upload test results artifact
        uses: actions/upload-artifact@v4
        if: always()  # Upload artifact even if the test fails
        with:
          name: azure-openai-test-results
          path: test-results/
          retention-days: 30